#!/bin/sh
##
# pcsd Pacemaker & Corosync configuration daemon
#
# chkconfig:   - 21 81 
# description: Pacemaker & Corosync configuration daemon

### BEGIN INIT INFO
# Provides: pcsd
# Required-Start: $remote_fs $network $syslog
# Required-Stop: $remote_fs $network $syslog
# Should-Start: 
# Should-Stop: 
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Starts and stops Pacemaker & Corosync daemon
# Description: Starts and stops Pacemaker & Corosync daemon
### END INIT INFO

# PATH
PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC="pcs daemon"
PARENT_NAME=pcs
NAME=pcsd
EXEC=ruby
SUB_EXEC=/usr/share/pcsd/ssl.rb
DAEMON=/usr/bin/ruby
DAEMON_ARGS="-I/usr/share/pcsd /usr/share/pcsd/ssl.rb"
RUN_DIR=/var/lib/pcsd
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if ruby is not installed
[ -x $(which $EXEC) ] || echo "$EXEC was not found. Is it installed?"
[ -x $(which $SUB_EXEC) ] || echo "$SUB_EXEC not found. Is pcs installed?"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME.conf ] && . /etc/default/$NAME.conf

# Source lsb init functions
. /lib/lsb/init-functions

do_start() 
{
    # Return
    # 0 if daemon has been started
    # 1 if daemon was already running
    # 2 if daemon could not be started
    start-stop-daemon --start --quiet --chdir $RUN_DIR --test --exec $DAEMON -- test \
      ||  return 1
    start-stop-daemon --start --quiet --chdir $RUN_DIR --exec $DAEMON -- $DAEMON_ARGS \
      || return 2
    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
    pidof pcsd > $PIDFILE
}

do_stop()
{
    # Return
    # 0 if daemon has been stopped
    # 1 if daemon was already stopped
    # 2 if daemon could not be stopped
    # other if a failure occurred
    start-stop-daemon --stop --quiet --retry forever/QUIT/1 --pidfile $PIDFILE
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}



case "$1" in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  status|monitor)
	status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit $?
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:

